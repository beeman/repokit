import { PublishTemplate } from './convert-publish-template'
import { log } from '@clack/prompts'
import { generatePublishTemplateImage } from './generate-publish-template-image'
import { join } from 'node:path'
import { writeFile } from 'node:fs/promises'

export async function generatePublishImages({
  output,
  templates,
  verbose,
}: {
  output: string
  templates: PublishTemplate[]
  verbose: boolean
}) {
  const images: string[] = []
  const imagesTsPath = join(output, 'images.ts')
  log.step(`Generating images ${verbose ? `to: ${imagesTsPath}` : ''}\``)

  for (const template of templates) {
    const image = await generatePublishTemplateImage({ template, target: join(output, 'images'), verbose })
    images.push(image)
    if (verbose) {
      log.info(`Published image ${image}`)
    }
  }

  // Generate a images.ts file that exports the images
  const imagesTsContent = `// Generated by repokit publish
import { StaticImageData } from 'next/image'
    ${images.map((image) => `import ${snakeToCamel(image)} from './images/${image}.png'`).join('\n')}

export const images: Record<string, StaticImageData> = {
  ${images.map((image) => `'${image}': ${snakeToCamel(image)}`).join(',\n')}
}
   `
  await writeFile(imagesTsPath, imagesTsContent)
  log.info(`Published images.ts ${verbose ? `to: ${imagesTsPath}` : ''}`)
}

function snakeToCamel(str: string) {
  return str.replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace('-', '').replace('_', ''))
}
